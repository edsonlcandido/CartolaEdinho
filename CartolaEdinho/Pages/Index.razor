@page "/"
@using System.Text.Json;
@using System.Text;
@using CartolaEdinho.Models;
@inject HttpClient Http


<div class="row">
    <div class="container">
        filtros por posição:
        <span class="has-text-weight-bold is-size-7 button is-small" @onclick="(() => filterByPosicao(1))">Goleiro</span>
        <span class="has-text-weight-bold is-size-7 button is-small" @onclick="(() => filterByPosicao(2))">Lateral</span>
        <span class="has-text-weight-bold is-size-7 button is-small" @onclick="(() => filterByPosicao(3))">Zagueiro</span>
        <span class="has-text-weight-bold is-size-7 button is-small" @onclick="(() => filterByPosicao(4))">Meia</span>
        <span class="has-text-weight-bold is-size-7 button is-small" @onclick="(() => filterByPosicao(5))">Atacante</span>
        <span class="has-text-weight-bold is-size-7 button is-small" @onclick="(() => filterByPosicao(6))">Técnico</span>
    </div>
</div>
<div class="row">
    <span>&ensp;</span>
</div>
<div class="row">    
    <div class="container table-container">
        <table class="table">        
        @if (mercado != null)
        {
            <thead>
                <tr>
                        <th><span class="has-text-weight-bold is-size-7 button is-static">time / partida</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-static">jogador</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-small" @onclick="(orderByPreco)">Preço</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-static">Var($)</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-small" @onclick="(orderByMedia)">Média</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-small" @onclick="(orderByUltima)">Ult.</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-small" @onclick="(orderByMinVal)">Min. p/ val.</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-small" @onclick="(orderByGol)">Gols</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-static">FIN</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-static">A</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-static">Faltas</span></th>
                        <th><span class="has-text-weight-bold is-size-7 button is-small" @onclick="(orderByEdinho)">Edinho</span></th>
                </tr>
            </thead>
            <tbody>
            @foreach (var atleta in atletas)
            {
                @if (atleta.status_id == 7)
                {
                    <tr>
                                <td>
                                    <span class="has-text-centered is-size-7">@clubes[atleta.clube_id.ToString()].nome_fantasia<br/>
                                    @clubes[atleta.clube_id.ToString()].confronto</span>
                                </td>
                                <td>
                                    <span>@atleta.apelido</span><br />
                                    <span class="is-size-7">@posicoes[atleta.posicao_id.ToString()].nome</span>
                                </td>                            
                            
                                <td><span class="is-size-7">@atleta.preco_num</span></td>
                            
                                <td><span class="is-size-7">@atleta.variacao_num</span></td>
                            
                                <td><span class="is-size-7">@atleta.media_num</span></td>
                            
                                <td><span class="is-size-7">@atleta.pontos_num</span></td>
                            
                                <td><span class="is-size-7 has-text-centered">@atleta.minimo_para_valorizar</span></td>
                            
                                <td><span class="is-size-7 has-text-centered">@atleta.scout.G</span></td>
                            
                                <td><span class="is-size-7 has-text-centered">@(atleta.scout.FD + atleta.scout.FT + atleta.scout.FF)</span></td>
                            
                                <td><span class="is-size-7 has-text-centered">@atleta.scout.A</span></td>
                            
                                <td><span class="is-size-7 has-text-centered">@(atleta.scout.FS - atleta.scout.FC)</span></td>
                            
                                <td><span class="is-size-7 has-text-centered">@(atleta.edinho = (double)Decimal.Round((decimal)atleta.media_num * (decimal)clubes[atleta.clube_id.ToString()].multiplicador, 2))</span></td>
                            </tr>
                }
            }
            </tbody>
        }
        else
        {
            <p>Carregando atletas...</p>
        }
        </table>
    </div>
</div>




@code {
    public Mercado mercado { get; set; }
    public Atleta[] atletas { get; set; }
    public Atleta[] filteredAtletas { get; set; }
    public Dictionary<string,Clube> clubes { get; set; }
    public Dictionary<string,Posicao> posicoes { get; set; }
    public Dictionary<string,Status> status { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //mercado = await Http.GetFromJsonAsync<Mercado>("/mercado_.json");        
        mercado = await Http.GetFromJsonAsync<Mercado>("https://cors.ehtudo.app/https://api.cartola.globo.com/atletas/mercado");
        //var mercado_destaques = await Http.GetFromJsonAsync<Mercado>("https://cors.ehtudo.app/https://api.cartola.globo.com/atletas/mercado/destaques");
        var partidas = await Http.GetFromJsonAsync<Partidas>("https://cors.ehtudo.app/https://api.cartola.globo.com/partidas");
        atletas = mercado.atletas.OrderByDescending(a => a.scout.G)
                        .ThenByDescending(a => a.scout.FD + a.scout.FT + a.scout.FF)
                        .ThenByDescending(a => a.scout.A)
                        .ThenBy(a => a.minimo_para_valorizar)
                        .ToArray();
        clubes = mercado.clubes;
        posicoes = mercado.posicoes;
        status = mercado.status;
        
        //for each partidas.partidas buscar clube_casa_id
        //marcar clube.mandante = true
        foreach (var partida in partidas.partidas)
        {
            string _confronto = clubes[partida.clube_casa_id.ToString()].abreviacao + " X " + clubes[partida.clube_visitante_id.ToString()].abreviacao;

            clubes[partida.clube_casa_id.ToString()].mandante = true;
            clubes[partida.clube_casa_id.ToString()].multiplicador = 1.1;
            clubes[partida.clube_visitante_id.ToString()].multiplicador = 0.9;
            clubes[partida.clube_casa_id.ToString()].posicao = partida.clube_casa_posicao;
            clubes[partida.clube_visitante_id.ToString()].posicao = partida.clube_visitante_posicao;
            if (partida.clube_casa_posicao < partida.clube_visitante_posicao)
            {
                clubes[partida.clube_casa_id.ToString()].melhor = true;
                clubes[partida.clube_casa_id.ToString()].multiplicador *= 1.1;
                clubes[partida.clube_visitante_id.ToString()].multiplicador *= 0.9;
            }
            else
            {
                clubes[partida.clube_visitante_id.ToString()].melhor = true;
                clubes[partida.clube_visitante_id.ToString()].multiplicador *= 1.1;
                clubes[partida.clube_casa_id.ToString()].multiplicador *= 0.9;
            }

            clubes[partida.clube_casa_id.ToString()].confronto = _confronto;
            clubes[partida.clube_visitante_id.ToString()].confronto = _confronto;
        }
        StateHasChanged();

        filteredAtletas = atletas;
    }

    void orderByPreco()
    {
        atletas = this.mercado.atletas;
        if (atletas[0] == atletas.OrderByDescending(a => a.preco_num).First())
        {
            atletas = atletas.OrderBy(a => a.preco_num).ToArray();

            InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
        }
        else
        {
            atletas = atletas.OrderByDescending(a => a.preco_num).ToArray();

            InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
        }

    }

    void orderByMinVal()
    {
        atletas = this.mercado.atletas;
        atletas = atletas.OrderBy(a => a.minimo_para_valorizar)
        .ToArray();

        InvokeAsync(() =>
                {
                    StateHasChanged();
                });
    }

    void orderByMedia()
    {
        atletas = this.mercado.atletas;
        if (atletas[0] == atletas.OrderByDescending(a => a.media_num).First())
        {
            atletas = atletas.OrderBy(a => a.media_num).ToArray();
        }
        else
        {
            atletas = atletas.OrderByDescending(a => a.media_num).ToArray();
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });

    }

    void orderByUltima()
    {
        atletas = this.mercado.atletas;
        if (atletas[0] == atletas.OrderByDescending(a => a.pontos_num).First())
        {
            atletas = atletas.OrderBy(a => a.pontos_num).ToArray();
        }
        else
        {
            atletas = atletas.OrderByDescending(a => a.pontos_num).ToArray();
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    void orderByGol()
    {
        atletas = this.mercado.atletas;
        atletas = atletas.OrderByDescending(a => a.scout.G)
                        .ThenByDescending(a => a.scout.FD + a.scout.FT + a.scout.FF)
                        .ThenByDescending(a => a.scout.A)
                        .ThenBy(a => a.minimo_para_valorizar)
                        .ToArray();

        InvokeAsync(() =>
                {
                    StateHasChanged();
                });
    }

    void orderByEdinho()
    {
        atletas = this.mercado.atletas;
        if (atletas[0] == atletas.OrderByDescending(a => a.edinho).First())
        {
            atletas = atletas.OrderBy(a => a.edinho).ToArray();
        }
        else
        {
            atletas = atletas.OrderByDescending(a => a.edinho).ToArray();
        }
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    void filterByPosicao(int posicao)
    {
        filteredAtletas = atletas.Where(a => a.posicao_id == Convert.ToInt32(posicao)).ToArray();
        atletas = filteredAtletas;
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }


    public class Mercado
    {
        public Atleta[] atletas { get; set; }
        public Dictionary<string,Clube> clubes { get; set; }
        public Dictionary<string,Posicao> posicoes { get; set; }
        public Dictionary<string,Status> status { get; set; }
    }

    //public class partidas
    public class Partidas
    {
        public Partida[] partidas { get; set; }
        public Dictionary<string, Clube> clubes { get; set; }
    }


    //create a class for each object in this JSON
    //{"aproveitamento_visitante":["v","d","d","e","d"],"aproveitamento_mandante":["e","e","e","d","v"],"transmissao":{"label":"","url":""},"local":"Castelão (CE)","status_transmissao_tr":"","status_cronometro_tr":"","periodo_tr":"","partida_data":"2023-06-03 16:00:00","inicio_cronometro_tr":"","placar_oficial_visitante":null,"placar_oficial_mandante":null,"partida_id":302759,"clube_visitante_posicao":16,"clube_visitante_id":265,"clube_casa_posicao":9,"clube_casa_id":356,"timestamp":1685818800,"campeonato_id":26,"valida":true}
    public class Partida
    {
        public string local { get; set; }
        public string partida_data { get; set; }
        public int partida_id { get; set; }
        public int clube_visitante_posicao { get; set; }
        public int clube_visitante_id { get; set; }
        public int clube_casa_posicao { get; set; }
        public int clube_casa_id { get; set; }
        public int timestamp { get; set; }
        public int campeonato_id { get; set; }
        public bool valida { get; set; }
        //aproveitamento mandante e visitante
        public string[] aproveitamento_visitante { get; set; }
        public string[] aproveitamento_mandante { get; set; }
    }

}
